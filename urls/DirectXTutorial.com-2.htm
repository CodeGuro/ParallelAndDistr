<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><title>DirectXTutorial.com</title><link href="DirectXTutorial.com-2_files/Layout.css" rel="Stylesheet" type="text/css"><link href="DirectXTutorial.com-2_files/Black.css" rel="Stylesheet" type="text/css"><script src="DirectXTutorial.com-2_files/ga.js" async="" type="text/javascript"></script><script type="text/javascript" src="DirectXTutorial.com-2_files/dxpages.js" language="javascript"></script></head><body><a href="http://www.directxtutorial.com/default.aspx"><img src="DirectXTutorial.com-2_files/HeadLogo.png" alt="DirectXTutorial.com"></a><div class="logoscript">The Ultimate DirectX Tutorial</div><div class="logout">Signed in as 'tukun2'<br><a class="mainlink" href="http://www.directxtutorial.com/changeprofile.aspx">Change Profile</a> - <a class="mainlink" href="http://www.directxtutorial.com/signout.aspx?retloc=lesson.aspx&amp;lessonid=9-11-2">Sign Out</a></div><div class="sidebar"><div class="sidepanel"><div><b>Navigation</b><br><br><a class="sidelink" href="http://www.directxtutorial.com/default.aspx">Home</a><br><a class="sidelink" href="http://www.directxtutorial.com/LessonList.aspx?listid=111">DirectX for Windows 8</a><br><a class="sidelinkin1" href="http://www.directxtutorial.com/LessonList.aspx?listid=112">DirectX 11.2</a><br><a class="sidelinkin1" href="http://www.directxtutorial.com/LessonList.aspx?listid=111">DirectX 11.1</a><br><a class="sidelink" href="http://www.directxtutorial.com/LegacyList.aspx">DirectX for Desktop</a><br><a class="sidelinkin1" href="http://www.directxtutorial.com/LessonList.aspx?listid=11">DirectX 11</a><br><a class="sidelinkin1" href="http://www.directxtutorial.com/LessonList.aspx?listid=9">DirectX 9</a><br><a class="sidelink" href="http://www.directxtutorial.com/lessonarticle.aspx?id=2">Useful Resources</a><br><a class="sidelink" href="http://www.directxtutorial.com/lessonarticle.aspx?id=1">About DirectXTutorial</a><br><a class="sidelink" href="http://www.directxtutorial.com/TPremium.aspx">DirectXTutorial Premium</a><br><a class="sidelink" href="http://www.directxtutorial.com/testimonials.aspx">Testimonials</a><br></div></div><br><div class="sidepanel"><div><b>Contact</b><br><br>Contact me here:<br><span style="font-size:11px;">Twitter: <a class="mainlink" href="https://twitter.com/#%21/dastopher">@dastopher</a><br>Email: chris@directxtutorial.com<br></span><br>Or leave me feedback:<br><span style="font-size:11px;"><a href="" class="mainlink" onclick="RunFeedback(); return false;">Quick Feedback</a></span><br></div></div><br></div><div class="titlebar">Lesson 2: Starting Winsock with UDP</div><div class="entrybox"><div class="navbar"><div class="prevbar"><a class="mainlink" href="http://www.directxtutorial.com/Lesson.aspx?lessonid=9-11-1">Previous</a></div><div class="nextbar"><a class="mainlink" href="http://www.directxtutorial.com/Lesson.aspx?lessonid=9-11-3">Next</a></div></div><div class="entryheader" style="position:relative;">Lesson Overview</div><div class="maintext" style="position: relative;"><p>In
 this lesson we will look into Windows Sockets (or Winsock).  We will 
learn the basics of starting the Winsock API and how to establish a 
simple connection using UDP (or User Datagram Protocol).</p><p>At the 
end of this lesson we will have two working programs, one for the server
 and one for the client.  However, they won't do anything just yet.  For
 that we'll have to wait until next lesson.  </p></div><div class="entryheader" style="position:relative;">A Simple Winsock Program</div><div class="maintext" style="position: relative;"><p>Before
 we get into the actual contents of a Winsock program, let's take a look
 at a full program.  This program does not do anything in itself.  Its 
practical uses are less than that of a Hello World program, but what it 
actually does is start Winsock, and stop it.</p><p>Important Note: We'll
 run this program in a Console.  This means we should create the project
 as a Win32 Console Application, rather than a Win32 Application.</p><p>Here's the program.  We'll go into each line of code right afterward.</p><div class="codebox">#define&nbsp;_WINSOCKAPI_&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Don't&nbsp;include&nbsp;Winsock.h<br>#include&nbsp;&lt;winsock2.h&gt;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;WinSock&nbsp;header&nbsp;file<br><br>#pragma&nbsp;comment(lib,&nbsp;"Ws2_32.lib")&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;WinSock&nbsp;Library<br><br>WSADATA&nbsp;Winsock;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Stores&nbsp;information&nbsp;about&nbsp;Winsock<br><br>void&nbsp;main()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;WSAStartup(MAKEWORD(2,&nbsp;2),&nbsp;&amp;Winsock);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Start&nbsp;Winsock<br><br>&nbsp;&nbsp;&nbsp;&nbsp;if(LOBYTE(Winsock.wVersion)&nbsp;!=&nbsp;2&nbsp;||&nbsp;HIBYTE(Winsock.wVersion)&nbsp;!=&nbsp;2)&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Check&nbsp;version<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WSACleanup();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Put&nbsp;Sending&nbsp;and&nbsp;Receiving&nbsp;Loop&nbsp;Here<br><br>&nbsp;&nbsp;&nbsp;&nbsp;WSACleanup();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Close&nbsp;Winsock&nbsp;before&nbsp;exiting<br><br>&nbsp;&nbsp;&nbsp;&nbsp;return;<br>}</div><p>Let's start at the top an work our way down:</p><p class="subheader">#define _WINSOCKAPI_ <br>#include &lt;winsock2.h&gt;</p><p style="padding-left:15px;">Let's take the second one first.  This is the header file for winsock version 2, the current version.</p><p style="padding-left:15px;">There is a winsock.h, but we won't use it.  In fact, including it will break your compile if you also include winsock2.h.  Unfortunately, winsock2.h requires winsock.h to compile, so it includes it by default.  Because this causes errors, the _WINSOCKAPI_ macro is available.  Defining this macro before including winsock2.h will handle all the resulting compile errors.</p><p class="subheader">#pragma comment(lib, "Ws2_32.lib")</p><p style="padding-left:15px;">This is the Winsock library file.  Just like we did with Direct3D, we need to use both the header file and the library file.</p><p class="subheader">WSADATA Winsock;</p><p style="padding-left:15px;">WSADATA stands for WinSock Api DATA.  It is a struct that contains the information for Winsock.  We won't be going over everything in it, as most of it isn't needed anymore and is only there for backward-compatibility.  Instead, we'll go into each member of the struct in detail as we find a need for it.</p><p style="padding-left:15px;">And now we get into the main() function:</p><p class="subheader">WSAStartup(MAKEWORD(2, 2), &amp;Winsock);</p><p style="padding-left:15px;">Before we can use Winsock, Windows has to perform certain actions to activate it for our application.  We don't have to worry about what these are though.  All we need to do is provide Windows with the version of Winsock we want to use, and supply an address where it can provide basic Winsock information for us.</p><p style="padding-left:15px;">The first parameter is the version we want to use.  If you look a the sample code, you will see that it says (MAKEWORD(2, 2)) here.  This parameter accepts the version number as a WORD, with the low-order byte as the major version and the high-order byte as the minor version.  This makes it simple for us to use MAKEWORD() and leave it at that.</p><p style="padding-left:15px;">The second parameter is a pointer to a WSADATA.  Ours is called Winsock.  Thus, the second parameter is &amp;Winsock.</p><p class="subheader">if(LOBYTE(Winsock.wVersion) != 2 || HIBYTE(Winsock.wVersion) != 2);</p><p style="padding-left:15px;">We will use this line to make sure the version we want is supported.  WSAStartup() won't directly tell us if the version we wanted was available, so we're going to have to figure it out by ourselves.  We do this using the wVersion member of the WSADATA.</p><p style="padding-left:15px;">This variable is a WORD that depicts the minimum required version we must use.  We will be expecting version 2.2 to be supported and used, so we will check to ensure the LOBYTE of wVersion is 2 and the HIBYTE as well.  If either one is not a 2, we know that something is seriously wrong, and we won't be able to proceed.  If this happens, we have to quit.</p><p class="subheader">WSACleanup();</p><p style="padding-left:15px;">This is an awfully simple function.  If WSAStartup() prepared Winsock, then WSACleanup unprepares it.  It tells Windows that we are done using Winsock and it can release any resources it may have been using.</p><p style="padding-left:15px;">Notice that our program has this in two places.  One is inside the if() we used to check ther version, while the other one is at the end of the program.  In either case, WSACleanup() gets called.  </p></div><div class="entryheader" style="position:relative;">Summary</div><div class="maintext" style="position: relative;"><p>Woot!  A blank console window that closes right away!  I know you accomplished this a long time ago, but the code should give you a good idea of the things that are always included in a Winsock application.</p><p>I honestly can't think of any exercises to put in this lesson.  The code is quite simple and doesn't really change.</p><p>So...onward!</p><center><p>Next Lesson: Sending Data</p><p><a class="mainlink" href="http://www.directxtutorial.com/Lesson.aspx?lessonid=9-11-3">GO! GO! GO!</a></p></center></div><center><div class="copyright"> Â© 2006-2016 DirectXTutorial.com. All Rights Reserved. <a href="" onclick="RunLegal(); return false;" class="availablelink">Expand</a></div></center></div><script type="text/javascript">var _gaq = _gaq || [];_gaq.push(['_setAccount', 'UA-476839-2']);_gaq.push(['_trackPageview']);(function() {var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);})();</script></body></html>